#Python libraries for math and graphics
import numpy as np
import matplotlib.pyplot as plt
from numpy import linalg as LA
from math import *

import sys                                          #for path to external scripts
sys.path.insert(0,'/sdcard/Download/sat/CoordGeo')

#local imports
#from CoordGeo.line.funcs import *
#from triangle.funcs import *
from conics.funcs import parab_gen
from params import *
#if using termux
import subprocess
import shlex
#end if

def line_gen(A,B):
   len =10
   dim = A.shape[0]
   x_AB = np.zeros((dim,len))
   lam_1 = np.linspace(0,1,len)
   for i in range(len):
     temp1 = A + lam_1[i]*(B-A)
     x_AB[:,i]= temp1.T
   return x_AB

def affine_transform(P,c,x):
    return P@x + c

#Input parameters
V = np.array([[0,0.5],[0.5,0]])
u = np.array(([-0.5,-1]))
f = 1


num_points = 500
p_x = np.linspace(-3,15,num_points)
p_y = (p_x-1)/(p_x-2) 

#Point of contact
q = np.array(([10,9/8]))
n = V@q + u

# Generating lines after transforming points
x_AB = line_gen(A,B)
x_direct_AB = line_gen(direct_A, direct_B)
x_parAxis_AB = line_gen(parAxis_A, parAxis_B)

#Plotting all shapes
leg_label = "{} {}".format("Latus", "Rectum")
plt.plot(x_AB[0,:],x_AB[1,:] ,label = leg_label)
plt.plot(x_direct_AB[0,:],x_direct_AB[1,:], label ='$Directrix$')
leg_label = "{} {}".format("Parabola", "Axis")
plt.plot(x_parAxis_AB[0,:],x_parAxis_AB[1,:],label= leg_label)
plt.plot(p[0,:], p[1,:],label ='$Parabola$')


#Labeling the coordinates
plot_coords = np.vstack((A,B,F,O)).T
plt.scatter(plot_coords[0,:], plot_coords[1,:])
vert_labels = ['A','B','F','O']
for i, txt in enumerate(vert_labels):
    label = "{}({:.0f},{:.0f})".format(txt, plot_coords[0,i],plot_coords[1,i]) #Form label as A(x,y)
    plt.annotate(label, # this is the text
                 (plot_coords[0,i], plot_coords[1,i]), # this is the point to label
                 textcoords="offset points", # how to position the text
                 xytext=(18,5), # distance from text to points (x,y)
                 ha='center') # horizontal alignment can be left, right or center

label = "{}{:.0f}".format("x = ", c) #Form label as A(x,y)
plt.annotate(label, # this is the text
             (plot_coords[0,2]-8, plot_coords[1,2]+2), # this is the point to label
             textcoords="offset points", # how to position the text
             xytext=(18,5), # distance from text to points (x,y)
             rotation = 90,
             ha='center') # horizontal alignment can be left, right or center
plt.xlabel('$x$')
plt.ylabel('$y$')
plt.legend(loc='best', fontsize = 'small')
plt.grid() # minor
plt.axis('equal')
plt.title('Parabola')
#if using termux
plt.savefig('../figs/problem1.pdf')
#subprocess.run(shlex.split("termux-open '../figs/problem1.pdf'")) 
#plt.savefig(d$os.path.join(script_dir, fig_relative))
#subprocess.run(shlex.split("termux-open "+os.path.join(script_dir, fig_relative)))
#else
#plt.show()
